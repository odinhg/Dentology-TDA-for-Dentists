!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/odinhg/Repositories/Personal/Dentology-TDA-for-Dentists/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
Cavity Detection Pipeline	README.md	/^## Cavity Detection Pipeline$/;"	s	chapter:Dentology: Topological Data Analysis for Dentists ðŸ¦·
Clone the repository:	README.md	/^### Clone the repository:$/;"	S	section:Dentology: Topological Data Analysis for Dentists ðŸ¦·""Installation and Usage
Dentology: Topological Data Analysis for Dentists ðŸ¦·	README.md	/^# Dentology: Topological Data Analysis for Dentists ðŸ¦·$/;"	c
Disclaimer	README.md	/^## Disclaimer$/;"	s	chapter:Dentology: Topological Data Analysis for Dentists ðŸ¦·
Generating Point Clouds	README.md	/^### Generating Point Clouds$/;"	S	section:Dentology: Topological Data Analysis for Dentists ðŸ¦·""Installation and Usage
Installation and Usage	README.md	/^## Installation and Usage$/;"	s	chapter:Dentology: Topological Data Analysis for Dentists ðŸ¦·
Running the Cavity Detection Pipeline	README.md	/^### Running the Cavity Detection Pipeline$/;"	S	section:Dentology: Topological Data Analysis for Dentists ðŸ¦·""Installation and Usage
Teeth Counting Pipeline	README.md	/^### Teeth Counting Pipeline$/;"	S	section:Dentology: Topological Data Analysis for Dentists ðŸ¦·""Upcoming Features
Upcoming Features	README.md	/^## Upcoming Features$/;"	s	chapter:Dentology: Topological Data Analysis for Dentists ðŸ¦·
_	sample_point_clouds.py	/^    point_cloud, _ = trimesh.sample.sample_surface_even(mesh, n_points)$/;"	v
args	cavity_detection.py	/^    args = parser.parse_args()$/;"	v
args	sample_point_clouds.py	/^    args = parser.parse_args()$/;"	v
ax	cavity_detection.py	/^    fig, ax = plt.subplots(figsize=(10, 10))$/;"	v
ax	sample_point_clouds.py	/^        ax = fig.add_subplot(111, projection='3d')$/;"	v
build_simplex_tree	cavity_detection.py	/^def build_simplex_tree(mesh: trimesh.Trimesh) -> SimplexTree:$/;"	f	typeref:typename:SimplexTree
diag	cavity_detection.py	/^    diag = st.persistence(homology_coeff_field=2)$/;"	v
f	cavity_detection.py	/^    f = lambda x: x[-1] # Use Z coordinate as filtration value$/;"	f	function:build_simplex_tree	file:
fig	cavity_detection.py	/^    fig, ax = plt.subplots(figsize=(10, 10))$/;"	v
fig	sample_point_clouds.py	/^        fig = plt.figure()$/;"	v
filename	cavity_detection.py	/^    filename = pathlib.Path(args.filename)$/;"	v
filename	sample_point_clouds.py	/^    filename = args.filename$/;"	v
load_mesh	cavity_detection.py	/^def load_mesh(input_file: pathlib.Path, scale: float=0.1) -> trimesh.Trimesh:$/;"	f	typeref:typename:trimesh.Trimesh
mesh	cavity_detection.py	/^    mesh = load_mesh(filename)$/;"	v
mesh	sample_point_clouds.py	/^    mesh = trimesh.load(filename)$/;"	v
n_points	sample_point_clouds.py	/^    n_points = args.n_points$/;"	v
np	cavity_detection.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	sample_point_clouds.py	/^import numpy as np$/;"	I	nameref:module:numpy
output	sample_point_clouds.py	/^    output = args.output$/;"	v
parser	cavity_detection.py	/^    parser = argparse.ArgumentParser(description="Sample a point cloud from STL file")$/;"	v
parser	sample_point_clouds.py	/^    parser = argparse.ArgumentParser(description="Sample a point cloud from STL file")$/;"	v
plot	sample_point_clouds.py	/^    plot = args.plot$/;"	v
plot_mesh	cavity_detection.py	/^    plot_mesh = args.plot_mesh$/;"	v
plt	cavity_detection.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	sample_point_clouds.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
point_cloud	sample_point_clouds.py	/^    point_cloud, _ = trimesh.sample.sample_surface_even(mesh, n_points)$/;"	v
show_mesh	cavity_detection.py	/^def show_mesh(mesh: trimesh.Trimesh) -> None:$/;"	f	typeref:typename:None
st	cavity_detection.py	/^    st = build_simplex_tree(mesh)$/;"	v
